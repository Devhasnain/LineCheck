datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
	provider = "prisma-client-js"
}

model Account {
	id								 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
	id					 String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String  @unique
  userId       String
  expires      DateTime
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
	id					  String    @id @default(auto()) @map("_id") @db.ObjectId
  firstname     String
  lastname      String
  email         String   @unique
  password      String
  mobile        String
  role          String   @default("guest") // Default role is guest
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  dataEntries DataEntry[]
}

model VerificationToken {
	id				 String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model Store {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  rating      String
  products    Product[] // Adding the opposite relation field
    openingTime  String    // Replace with appropriate time type
  closingTime  String    // Replace with appropriate time type
  time DateTime
  volume String
  lineQueue Int
  dataEntries DataEntry[]
}

model Product {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  store_id            String   @map("store_id") @db.ObjectId
  name                String   @db.String 
  productPicturePath  String   @db.String
  description         String   @db.String 
  is_active           Boolean  @default(true)
  stock               Int      @default(0)
  price               Float    // You can use Float for price, but consider using Decimal for precise currency handling
  store               Store    @relation(fields: [store_id], references: [id])
}


model DataEntry {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  store_id       String
  time        DateTime
  volume      Float
  persons     Int
  user        User     @relation(fields: [userId], references: [id])
  bar         Store      @relation(fields: [store_id], references: [id])
}